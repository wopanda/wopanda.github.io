/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KnowledgeMapPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dataFilePath: "learning-data.md",
  autoSave: true,
  defaultViewMode: "global",
  mapTitle: "\u5B66\u4E60\u8FDB\u5EA6\u5730\u56FE"
};
var KnowledgeMapPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.data = null;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_KNOWLEDGE_MAP,
      (leaf) => new KnowledgeMapView(leaf, this)
    );
    this.addRibbonIcon("brain-circuit", "\u77E5\u8BC6\u70B9\u5730\u56FE", (evt) => {
      this.activateView();
    });
    this.addCommand({
      id: "open-knowledge-map",
      name: "\u6253\u5F00\u77E5\u8BC6\u70B9\u5730\u56FE",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new KnowledgeMapSettingTab(this.app, this));
    this.data = await this.loadLearningData();
    console.log("\u77E5\u8BC6\u70B9\u5730\u56FE\u63D2\u4EF6\u5DF2\u52A0\u8F7D");
  }
  onunload() {
    console.log("\u77E5\u8BC6\u70B9\u5730\u56FE\u63D2\u4EF6\u5DF2\u5378\u8F7D");
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_KNOWLEDGE_MAP);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf("tab");
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_KNOWLEDGE_MAP, active: true });
      }
    }
    if (leaf) {
      workspace.setActiveLeaf(leaf);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await super.loadData());
  }
  async saveSettings() {
    await super.saveData(this.settings);
  }
  async loadLearningData() {
    try {
      const file = this.app.vault.getAbstractFileByPath(this.settings.dataFilePath);
      if (file && file instanceof import_obsidian.TFile) {
        const content = await this.app.vault.read(file);
        if (this.settings.dataFilePath.endsWith(".md")) {
          return this.extractJsonFromMarkdown(content);
        } else {
          const data = JSON.parse(content);
          return this.ensureDataCompatibility(data);
        }
      }
    } catch (error) {
      console.error("\u52A0\u8F7D\u5B66\u4E60\u6570\u636E\u5931\u8D25:", error);
    }
    return null;
  }
  // 确保数据兼容性，为旧数据添加新字段
  ensureDataCompatibility(data) {
    if (!data.learningHistory) {
      data.learningHistory = [];
    }
    if (data.todayProgress !== void 0) {
      delete data.todayProgress;
    }
    if (data.learningHistory && Array.isArray(data.learningHistory)) {
      data.learningHistory = data.learningHistory.map((record) => ({
        date: record.date,
        newlyLearned: record.newlyLearned || 0
      }));
    }
    return data;
  }
  // 获取今日日期字符串（YYYY-MM-DD格式）
  getTodayDateString() {
    const today = new Date();
    return today.toISOString().split("T")[0];
  }
  // 获取详细的日期信息，用于调试和展示
  getDateInfo(dateString) {
    const targetDate = dateString ? new Date(dateString) : new Date();
    const today = this.getTodayDateString();
    const targetDateString = targetDate.toISOString().split("T")[0];
    const dayOfWeek = targetDate.getDay();
    const dayNames = ["\u5468\u65E5", "\u5468\u4E00", "\u5468\u4E8C", "\u5468\u4E09", "\u5468\u56DB", "\u5468\u4E94", "\u5468\u516D"];
    return {
      date: targetDateString,
      dayOfWeek,
      dayName: dayNames[dayOfWeek],
      isToday: targetDateString === today
    };
  }
  // 记录学习历史
  recordLearningProgress(pointId, oldStatus, newStatus) {
    if (!this.data)
      return;
    const today = this.getTodayDateString();
    let todayRecord = this.data.learningHistory.find((record) => record.date === today);
    if (!todayRecord) {
      todayRecord = {
        date: today,
        newlyLearned: 0
      };
      this.data.learningHistory.push(todayRecord);
    }
    if (oldStatus === "unlearned" && newStatus === "learned") {
      todayRecord.newlyLearned++;
    }
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    const cutoffDate = thirtyDaysAgo.toISOString().split("T")[0];
    this.data.learningHistory = this.data.learningHistory.filter(
      (record) => record.date >= cutoffDate
    );
  }
  extractJsonFromMarkdown(markdownContent) {
    try {
      const jsonBlockRegex = /```json\s*\n([\s\S]*?)\n```/;
      const match = markdownContent.match(jsonBlockRegex);
      if (match && match[1]) {
        const jsonString = match[1].trim();
        const data = JSON.parse(jsonString);
        return this.ensureDataCompatibility(data);
      } else {
        console.error("\u5728Markdown\u6587\u4EF6\u4E2D\u672A\u627E\u5230JSON\u4EE3\u7801\u5757");
        return null;
      }
    } catch (error) {
      console.error("\u89E3\u6790Markdown\u4E2D\u7684JSON\u5931\u8D25:", error);
      return null;
    }
  }
  async saveLearningData(data) {
    try {
      let fileContent;
      if (this.settings.dataFilePath.endsWith(".md")) {
        fileContent = this.createMarkdownWithJson(data);
      } else {
        fileContent = JSON.stringify(data, null, 2);
      }
      await this.app.vault.adapter.write(this.settings.dataFilePath, fileContent);
      this.data = data;
    } catch (error) {
      console.error("\u4FDD\u5B58\u5B66\u4E60\u6570\u636E\u5931\u8D25:", error);
    }
  }
  createMarkdownWithJson(data) {
    const jsonString = JSON.stringify(data, null, 2);
    return `\`\`\`json
${jsonString}
\`\`\``;
  }
  async updateKnowledgePointStatus(pointId, newStatus, shouldRecordHistory = true) {
    if (!this.data) {
      this.data = await this.loadLearningData();
      if (!this.data) {
        console.error("\u65E0\u6CD5\u52A0\u8F7D\u5B66\u4E60\u6570\u636E");
        return;
      }
    }
    console.log(`\u5C1D\u8BD5\u66F4\u65B0\u77E5\u8BC6\u70B9 ${pointId} \u5230\u72B6\u6001 ${newStatus}`);
    let oldStatus = null;
    let updated = false;
    outerLoop:
      for (const module2 of this.data.knowledgeData) {
        for (const point of module2.knowledgePoints) {
          if (point.id === pointId) {
            console.log(`\u627E\u5230\u6A21\u5757\u7EA7\u77E5\u8BC6\u70B9: ${point.name}, \u5F53\u524D\u72B6\u6001: ${point.status}`);
            oldStatus = point.status;
            point.status = newStatus;
            updated = true;
            break outerLoop;
          }
        }
        for (const subModule of module2.children) {
          for (const point of subModule.knowledgePoints) {
            if (point.id === pointId) {
              console.log(`\u627E\u5230\u5B50\u6A21\u5757\u7EA7\u77E5\u8BC6\u70B9: ${point.name}, \u5F53\u524D\u72B6\u6001: ${point.status}`);
              oldStatus = point.status;
              point.status = newStatus;
              updated = true;
              break outerLoop;
            }
          }
        }
      }
    if (updated && oldStatus !== null) {
      console.log(`\u77E5\u8BC6\u70B9\u72B6\u6001\u66F4\u65B0\u6210\u529F: ${pointId} -> ${newStatus}`);
      if (shouldRecordHistory) {
        this.recordLearningProgress(pointId, oldStatus, newStatus);
      }
      this.data.lastUpdate = new Date().toISOString();
      try {
        await this.saveLearningData(this.data);
        console.log("\u6570\u636E\u4FDD\u5B58\u6210\u529F");
      } catch (error) {
        console.error("\u4FDD\u5B58\u6570\u636E\u5931\u8D25:", error);
      }
    } else {
      console.error(`\u672A\u627E\u5230\u77E5\u8BC6\u70B9: ${pointId}`);
    }
  }
};
var VIEW_TYPE_KNOWLEDGE_MAP = "knowledge-map-view";
var KnowledgeMapView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentViewMode = "global";
    this.selectedModule = null;
    this.moduleData = [];
    this.plugin = plugin;
    this.currentViewMode = plugin.settings.defaultViewMode;
    this.selectedModule = plugin.settings.selectedModule || null;
  }
  getViewType() {
    return VIEW_TYPE_KNOWLEDGE_MAP;
  }
  getDisplayText() {
    return "\u77E5\u8BC6\u70B9\u5730\u56FE";
  }
  getIcon() {
    return "brain-circuit";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("knowledge-map-container");
    const toolbar = container.createEl("div", { cls: "km-toolbar" });
    const titleArea = toolbar.createEl("div", { cls: "km-title-area" });
    titleArea.createEl("h3", { text: `\u{1F4CA} ${this.plugin.settings.mapTitle}` });
    const controlArea = toolbar.createEl("div", { cls: "km-control-area" });
    const modeToggle = controlArea.createEl("div", { cls: "km-mode-toggle" });
    const globalBtn = modeToggle.createEl("button", {
      cls: `km-mode-btn ${this.currentViewMode === "global" ? "active" : ""}`,
      text: "\u{1F30D} \u5168\u5C40"
    });
    const moduleBtn = modeToggle.createEl("button", {
      cls: `km-mode-btn ${this.currentViewMode === "module" ? "active" : ""}`,
      text: "\u{1F4DA} \u6A21\u5757"
    });
    const moduleSearchContainer = controlArea.createEl("div", { cls: "km-module-search-container" });
    const moduleSearch = moduleSearchContainer.createEl("input", {
      cls: "km-module-search",
      attr: {
        type: "text",
        placeholder: "\u641C\u7D22\u6A21\u5757...",
        value: this.selectedModule || ""
      }
    });
    const moduleDropdown = moduleSearchContainer.createEl("div", { cls: "km-module-dropdown" });
    globalBtn.addEventListener("click", () => this.switchViewMode("global"));
    moduleBtn.addEventListener("click", () => this.switchViewMode("module"));
    moduleSearch.addEventListener("input", (e) => {
      const query = e.target.value;
      this.filterModules(query, moduleDropdown);
    });
    moduleSearch.addEventListener("focus", () => {
      this.showModuleDropdown(moduleDropdown);
    });
    moduleSearch.addEventListener("blur", () => {
      setTimeout(() => {
        moduleDropdown.style.display = "none";
      }, 200);
    });
    const contentContainer = container.createEl("div", { cls: "km-content" });
    await this.setupModuleSearch(moduleSearchContainer);
    await this.renderContent();
  }
  async onClose() {
  }
  async switchViewMode(mode) {
    this.currentViewMode = mode;
    const modeButtons = this.containerEl.querySelectorAll(".km-mode-btn");
    modeButtons.forEach((btn) => btn.removeClass("active"));
    const activeBtn = this.containerEl.querySelector(`.km-mode-btn:${mode === "global" ? "first" : "last"}-child`);
    activeBtn == null ? void 0 : activeBtn.addClass("active");
    const moduleSearchContainer = this.containerEl.querySelector(".km-module-search-container");
    if (moduleSearchContainer) {
      moduleSearchContainer.style.display = mode === "module" ? "block" : "none";
    }
    await this.renderContent();
    this.plugin.settings.defaultViewMode = mode;
    await this.plugin.saveSettings();
  }
  async setupModuleSearch(container) {
    const data = await this.plugin.loadLearningData();
    if (!data)
      return;
    this.moduleData = data.knowledgeData;
    container.style.display = this.currentViewMode === "module" ? "block" : "none";
  }
  async showModuleDropdown(dropdown) {
    dropdown.empty();
    dropdown.style.display = "block";
    const data = await this.plugin.loadLearningData();
    if (!data)
      return;
    data.knowledgeData.forEach((module2) => {
      const option = dropdown.createEl("div", {
        cls: "km-module-option",
        text: module2.name
      });
      option.addEventListener("click", () => {
        this.selectModule(module2.name);
        dropdown.style.display = "none";
      });
    });
  }
  async filterModules(query, dropdown) {
    dropdown.empty();
    dropdown.style.display = "block";
    const data = await this.plugin.loadLearningData();
    if (!data)
      return;
    const filteredModules = data.knowledgeData.filter(
      (module2) => module2.name.toLowerCase().includes(query.toLowerCase())
    );
    if (filteredModules.length === 0) {
      dropdown.createEl("div", {
        cls: "km-module-option km-no-results",
        text: "\u6CA1\u6709\u627E\u5230\u5339\u914D\u7684\u6A21\u5757"
      });
      return;
    }
    filteredModules.forEach((module2) => {
      const option = dropdown.createEl("div", {
        cls: "km-module-option",
        text: module2.name
      });
      if (query) {
        const regex = new RegExp(`(${query})`, "gi");
        option.innerHTML = module2.name.replace(regex, "<mark>$1</mark>");
      }
      option.addEventListener("click", () => {
        this.selectModule(module2.name);
        dropdown.style.display = "none";
      });
    });
  }
  selectModule(moduleName) {
    this.selectedModule = moduleName;
    const searchInput = this.containerEl.querySelector(".km-module-search");
    if (searchInput) {
      searchInput.value = moduleName;
    }
    this.plugin.settings.selectedModule = moduleName;
    this.plugin.saveSettings();
    this.renderContent();
  }
  jumpToModuleView(moduleName) {
    console.log(`\u8DF3\u8F6C\u5230\u6A21\u5757\u8BE6\u7EC6\u89C6\u56FE: ${moduleName}`);
    this.currentViewMode = "module";
    this.selectedModule = moduleName;
    const modeButtons = this.containerEl.querySelectorAll(".km-mode-btn");
    modeButtons.forEach((btn) => btn.removeClass("active"));
    const moduleBtn = this.containerEl.querySelector(".km-mode-btn:last-child");
    moduleBtn == null ? void 0 : moduleBtn.addClass("active");
    const moduleSearchContainer = this.containerEl.querySelector(".km-module-search-container");
    if (moduleSearchContainer) {
      moduleSearchContainer.style.display = "block";
    }
    const searchInput = this.containerEl.querySelector(".km-module-search");
    if (searchInput) {
      searchInput.value = moduleName;
    }
    this.plugin.settings.defaultViewMode = "module";
    this.plugin.settings.selectedModule = moduleName;
    this.plugin.saveSettings();
    this.renderContent();
  }
  async renderContent() {
    const contentContainer = this.containerEl.querySelector(".km-content");
    if (!contentContainer)
      return;
    contentContainer.empty();
    if (this.currentViewMode === "global") {
      await this.renderGlobalView(contentContainer);
    } else {
      await this.renderModuleView(contentContainer);
    }
  }
  async renderGlobalView(container) {
    const data = await this.plugin.loadLearningData();
    if (!data) {
      container.createEl("p", { text: "\u65E0\u6CD5\u52A0\u8F7D\u5B66\u4E60\u6570\u636E", cls: "km-error" });
      return;
    }
    await this.renderGlobalProgressBar(container, data);
    const battleMapContainer = container.createEl("div", { cls: "km-battle-map" });
    const sortedModules = [...data.knowledgeData].sort((a, b) => {
      const aCount = this.getModuleKnowledgePointCount(a);
      const bCount = this.getModuleKnowledgePointCount(b);
      return bCount - aCount;
    });
    const moduleCount = sortedModules.length;
    battleMapContainer.style.display = "grid";
    battleMapContainer.style.gridTemplateColumns = "repeat(auto-fit, minmax(320px, 1fr))";
    battleMapContainer.style.gridAutoRows = "minmax(300px, auto)";
    battleMapContainer.style.gap = "clamp(16px, 2vw, 24px)";
    battleMapContainer.style.padding = "clamp(16px, 3vw, 24px)";
    battleMapContainer.style.alignContent = "start";
    battleMapContainer.style.justifyContent = "center";
    for (const module2 of sortedModules) {
      await this.renderModuleTerritory(battleMapContainer, module2);
    }
    await this.renderTripleStatsPanel(container, data);
  }
  // 新的"品"字形统计面板
  async renderTripleStatsPanel(container, data) {
    const tripleStatsContainer = container.createEl("div", { cls: "km-triple-stats-container" });
    await this.renderBasicStats(tripleStatsContainer, data);
    await this.renderTrendAnalysis(tripleStatsContainer, data);
  }
  // 基础统计（左下角）
  async renderBasicStats(container, data) {
    const basicStatsPanel = container.createEl("div", { cls: "km-basic-stats-panel" });
    const header = basicStatsPanel.createEl("div", { cls: "km-stats-header" });
    header.createEl("h3", { text: "\u{1F4CA} \u5B66\u4E60\u7EDF\u8BA1" });
    const cardsContainer = basicStatsPanel.createEl("div", { cls: "km-stat-cards-container" });
    const todayStats = this.calculateTodayStats(data);
    const globalStats = this.calculateGlobalStats(data);
    this.createStatCard(cardsContainer, "\u4ECA\u65E5\u65B0\u638C\u63E1", `${todayStats.newlyLearned}`, "card-today");
    this.createStatCard(
      cardsContainer,
      "\u5DF2\u638C\u63E1",
      `${globalStats.learned}`,
      "card-learned",
      `${(globalStats.learned / globalStats.total * 100).toFixed(1)}%`
    );
    this.createStatCard(
      cardsContainer,
      "\u9700\u590D\u4E60",
      `${globalStats.review}`,
      "card-review",
      `${(globalStats.review / globalStats.total * 100).toFixed(1)}%`
    );
    this.createStatCard(
      cardsContainer,
      "\u672A\u5B66\u4E60",
      `${globalStats.unlearned}`,
      "card-unlearned",
      `${(globalStats.unlearned / globalStats.total * 100).toFixed(1)}%`
    );
  }
  // 渲染全局进度条（知识地图上方）
  async renderGlobalProgressBar(container, data) {
    const globalStats = this.calculateGlobalStats(data);
    const percentage = globalStats.total > 0 ? globalStats.learned / globalStats.total * 100 : 0;
    const progressSection = container.createEl("div", { cls: "km-global-progress-section" });
    const progressHeader = progressSection.createEl("div", { cls: "km-global-progress-header" });
    progressHeader.createEl("span", { cls: "km-global-progress-title", text: "\u603B\u8FDB\u5EA6" });
    progressHeader.createEl("span", { cls: "km-global-progress-percentage", text: `${percentage.toFixed(1)}%` });
    const progressContainer = progressSection.createEl("div", { cls: "km-global-progress-bar-container" });
    const progressBar = progressContainer.createEl("div", { cls: "km-global-progress-bar" });
    progressBar.style.width = `${percentage}%`;
  }
  // 趋势分析（右下角）
  async renderTrendAnalysis(container, data) {
    const trendPanel = container.createEl("div", { cls: "km-trend-analysis-panel" });
    const header = trendPanel.createEl("div", { cls: "km-stats-header" });
    header.createEl("h3", { text: "\u{1F4C8} \u8D8B\u52BF\u5206\u6790" });
    const weeklyData = this.getWeeklyLearningData(data);
    const chartContainer = trendPanel.createEl("div", { cls: "km-chart-container" });
    this.renderWeeklyChart(chartContainer, weeklyData);
    const metricsContainer = trendPanel.createEl("div", { cls: "km-metrics-container" });
    const avgRate = this.calculateDailyAverageRate(weeklyData);
    const learningStreak = this.calculateLearningStreak(data);
    const rateCard = metricsContainer.createEl("div", { cls: "km-metric-card" });
    rateCard.createEl("div", { cls: "km-metric-label", text: "\u65E5\u5E73\u5747\u901F\u7387" });
    rateCard.createEl("div", { cls: "km-metric-value", text: `${avgRate.toFixed(1)} \u4E2A/\u5929` });
    const streakCard = metricsContainer.createEl("div", { cls: "km-metric-card" });
    streakCard.createEl("div", { cls: "km-metric-label", text: "\u8FDE\u7EED\u5B66\u4E60" });
    streakCard.createEl("div", { cls: "km-metric-value", text: `${learningStreak} \u5929` });
  }
  // 获取本周学习数据（周一到周日）
  getWeeklyLearningData(data) {
    const today = new Date();
    const weekStart = new Date(today);
    const dayOfWeek = today.getDay();
    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
    weekStart.setDate(today.getDate() + mondayOffset);
    console.log(`\u4ECA\u5929\u662F: ${this.plugin.getDateInfo().dayName} (${this.plugin.getDateInfo().date})`);
    console.log(`\u672C\u5468\u4E00: ${this.plugin.getDateInfo(weekStart.toISOString().split("T")[0]).dayName} (${weekStart.toISOString().split("T")[0]})`);
    const weeklyData = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(weekStart);
      date.setDate(weekStart.getDate() + i);
      const dateString = date.toISOString().split("T")[0];
      const record = data.learningHistory.find((r) => r.date === dateString);
      if (record) {
        weeklyData.push(record);
      } else {
        weeklyData.push({
          date: dateString,
          newlyLearned: 0
        });
      }
    }
    return weeklyData;
  }
  // 计算日平均学习速率
  calculateDailyAverageRate(weeklyData) {
    const totalLearned = weeklyData.reduce((sum, day) => sum + day.newlyLearned, 0);
    return totalLearned / 7;
  }
  // 计算学习连续天数
  calculateLearningStreak(data) {
    if (!data.learningHistory.length)
      return 0;
    const sortedHistory = [...data.learningHistory].sort((a, b) => b.date.localeCompare(a.date));
    let streak = 0;
    let currentDate = new Date();
    for (const record of sortedHistory) {
      const recordDate = new Date(record.date);
      const daysDiff = Math.floor((currentDate.getTime() - recordDate.getTime()) / (1e3 * 60 * 60 * 24));
      if (daysDiff === streak && record.newlyLearned > 0) {
        streak++;
        currentDate = recordDate;
      } else {
        break;
      }
    }
    return streak;
  }
  // 渲染本周柱状图
  renderWeeklyChart(container, weeklyData) {
    const chartWrapper = container.createEl("div", { cls: "km-chart-wrapper" });
    const chartBars = chartWrapper.createEl("div", { cls: "km-chart-bars" });
    const maxValue = Math.max(...weeklyData.map((d) => d.newlyLearned), 1);
    const dayNames = ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"];
    weeklyData.forEach((dayData, index) => {
      const barContainer = chartBars.createEl("div", { cls: "km-chart-bar-container" });
      const bar = barContainer.createEl("div", { cls: "km-chart-bar" });
      const height = dayData.newlyLearned / maxValue * 65;
      bar.style.height = `${height}px`;
      bar.setAttribute("data-value", dayData.newlyLearned.toString());
      const today = new Date().toISOString().split("T")[0];
      if (dayData.date === today) {
        bar.classList.add("today");
      }
      if (dayData.newlyLearned > 0) {
        bar.createEl("div", { cls: "km-chart-value", text: dayData.newlyLearned.toString() });
      }
      barContainer.createEl("div", { cls: "km-chart-label", text: dayNames[index] });
    });
  }
  // 旧的统计面板函数（保留用于兼容）
  async renderStatsPanel(container, data) {
    const statsPanel = container.createEl("div", { cls: "km-stats-panel" });
    const header = statsPanel.createEl("div", { cls: "km-stats-header" });
    header.createEl("h3", { text: "\u{1F4C8} \u5B66\u4E60\u7EDF\u8BA1" });
    const cardsContainer = statsPanel.createEl("div", { cls: "km-stat-cards-container" });
    const todayStats = this.calculateTodayStats(data);
    const globalStats = this.calculateGlobalStats(data);
    this.createStatCard(cardsContainer, "\u4ECA\u65E5\u65B0\u638C\u63E1", `${todayStats.newlyLearned}`, "today");
    this.createStatCard(cardsContainer, "\u5DF2\u638C\u63E1", `${globalStats.learned}`, "learned", `${(globalStats.learned / globalStats.total * 100).toFixed(1)}%`);
    this.createStatCard(cardsContainer, "\u9700\u590D\u4E60", `${globalStats.review}`, "review", `${(globalStats.review / globalStats.total * 100).toFixed(1)}%`);
    this.createStatCard(cardsContainer, "\u672A\u5B66\u4E60", `${globalStats.unlearned}`, "unlearned", `${(globalStats.unlearned / globalStats.total * 100).toFixed(1)}%`);
    const progressWrapper = statsPanel.createEl("div", { cls: "km-progress-wrapper" });
    progressWrapper.createEl("span", { cls: "km-progress-label", text: "\u603B\u8FDB\u5EA6" });
    const progressBarContainer = progressWrapper.createEl("div", { cls: "km-progress-bar-container" });
    const progressBar = progressBarContainer.createEl("div", { cls: "km-progress-bar" });
    const percentage = globalStats.total > 0 ? globalStats.learned / globalStats.total * 100 : 0;
    progressBar.style.width = `${percentage}%`;
    progressWrapper.createEl("span", { cls: "km-progress-percentage", text: `${percentage.toFixed(1)}%` });
  }
  createStatCard(container, title, value, type, subtitle) {
    const card = container.createEl("div", { cls: `km-stat-card card-${type}` });
    card.createEl("div", { cls: "km-stat-card-title", text: title });
    card.createEl("div", { cls: "km-stat-card-value", text: value });
    if (subtitle) {
      card.createEl("div", { cls: "km-stat-card-subtitle", text: subtitle });
    }
  }
  calculateTodayStats(data) {
    const today = this.plugin.getTodayDateString();
    const todayRecord = data.learningHistory.find((record) => record.date === today);
    if (todayRecord) {
      return {
        newlyLearned: todayRecord.newlyLearned
      };
    }
    return {
      newlyLearned: 0
    };
  }
  updateStatsPanel() {
    if (this.currentViewMode !== "global" || !this.plugin.data) {
      return;
    }
    this.updateGlobalProgressBar();
    const tripleStatsContainer = this.containerEl.querySelector(".km-triple-stats-container");
    if (tripleStatsContainer) {
      this.updateTripleStatsPanel(tripleStatsContainer);
      return;
    }
    const statsPanel = this.containerEl.querySelector(".km-stats-panel");
    if (!statsPanel) {
      return;
    }
    const todayStats = this.calculateTodayStats(this.plugin.data);
    const globalStats = this.calculateGlobalStats(this.plugin.data);
    const cards = statsPanel.querySelectorAll(".km-stat-card");
    const todayCard = cards[0];
    if (todayCard) {
      const valueEl = todayCard.querySelector(".km-stat-card-value");
      if (valueEl)
        valueEl.textContent = `${todayStats.newlyLearned}`;
    }
    const learnedCard = cards[1];
    if (learnedCard) {
      const valueEl = learnedCard.querySelector(".km-stat-card-value");
      const subtitleEl = learnedCard.querySelector(".km-stat-card-subtitle");
      if (valueEl)
        valueEl.textContent = `${globalStats.learned}`;
      if (subtitleEl)
        subtitleEl.textContent = `${(globalStats.learned / globalStats.total * 100).toFixed(1)}%`;
    }
    const reviewCard = cards[2];
    if (reviewCard) {
      const valueEl = reviewCard.querySelector(".km-stat-card-value");
      const subtitleEl = reviewCard.querySelector(".km-stat-card-subtitle");
      if (valueEl)
        valueEl.textContent = `${globalStats.review}`;
      if (subtitleEl)
        subtitleEl.textContent = `${(globalStats.review / globalStats.total * 100).toFixed(1)}%`;
    }
    const unlearnedCard = cards[3];
    if (unlearnedCard) {
      const valueEl = unlearnedCard.querySelector(".km-stat-card-value");
      const subtitleEl = unlearnedCard.querySelector(".km-stat-card-subtitle");
      if (valueEl)
        valueEl.textContent = `${globalStats.unlearned}`;
      if (subtitleEl)
        subtitleEl.textContent = `${(globalStats.unlearned / globalStats.total * 100).toFixed(1)}%`;
    }
    const progressBar = statsPanel.querySelector(".km-progress-bar");
    const percentageLabel = statsPanel.querySelector(".km-progress-percentage");
    if (progressBar && percentageLabel) {
      const percentage = globalStats.total > 0 ? globalStats.learned / globalStats.total * 100 : 0;
      progressBar.style.width = `${percentage}%`;
      percentageLabel.textContent = `${percentage.toFixed(1)}%`;
    }
  }
  // 更新全局进度条
  updateGlobalProgressBar() {
    if (!this.plugin.data)
      return;
    const progressSection = this.containerEl.querySelector(".km-global-progress-section");
    if (!progressSection)
      return;
    const globalStats = this.calculateGlobalStats(this.plugin.data);
    const percentage = globalStats.total > 0 ? globalStats.learned / globalStats.total * 100 : 0;
    const percentageEl = progressSection.querySelector(".km-global-progress-percentage");
    if (percentageEl) {
      percentageEl.textContent = `${percentage.toFixed(1)}%`;
    }
    const progressBar = progressSection.querySelector(".km-global-progress-bar");
    if (progressBar) {
      progressBar.style.width = `${percentage}%`;
    }
  }
  // 更新新版"品"字形统计面板
  updateTripleStatsPanel(container) {
    if (!this.plugin.data)
      return;
    const todayStats = this.calculateTodayStats(this.plugin.data);
    const globalStats = this.calculateGlobalStats(this.plugin.data);
    const weeklyData = this.getWeeklyLearningData(this.plugin.data);
    const basicStatsPanel = container.querySelector(".km-basic-stats-panel");
    if (basicStatsPanel) {
      const cards = basicStatsPanel.querySelectorAll(".km-stat-card");
      if (cards[0]) {
        const valueEl = cards[0].querySelector(".km-stat-card-value");
        if (valueEl)
          valueEl.textContent = `${todayStats.newlyLearned}`;
      }
      if (cards[1]) {
        const valueEl = cards[1].querySelector(".km-stat-card-value");
        const subtitleEl = cards[1].querySelector(".km-stat-card-subtitle");
        if (valueEl)
          valueEl.textContent = `${globalStats.learned}`;
        if (subtitleEl)
          subtitleEl.textContent = `${(globalStats.learned / globalStats.total * 100).toFixed(1)}%`;
      }
      if (cards[2]) {
        const valueEl = cards[2].querySelector(".km-stat-card-value");
        const subtitleEl = cards[2].querySelector(".km-stat-card-subtitle");
        if (valueEl)
          valueEl.textContent = `${globalStats.review}`;
        if (subtitleEl)
          subtitleEl.textContent = `${(globalStats.review / globalStats.total * 100).toFixed(1)}%`;
      }
      if (cards[3]) {
        const valueEl = cards[3].querySelector(".km-stat-card-value");
        const subtitleEl = cards[3].querySelector(".km-stat-card-subtitle");
        if (valueEl)
          valueEl.textContent = `${globalStats.unlearned}`;
        if (subtitleEl)
          subtitleEl.textContent = `${(globalStats.unlearned / globalStats.total * 100).toFixed(1)}%`;
      }
      const progressBar = basicStatsPanel.querySelector(".km-progress-bar");
      const percentageLabel = basicStatsPanel.querySelector(".km-progress-percentage");
      if (progressBar && percentageLabel) {
        const percentage = globalStats.total > 0 ? globalStats.learned / globalStats.total * 100 : 0;
        progressBar.style.width = `${percentage}%`;
        percentageLabel.textContent = `${percentage.toFixed(1)}%`;
      }
    }
    const trendPanel = container.querySelector(".km-trend-analysis-panel");
    if (trendPanel) {
      const chartContainer = trendPanel.querySelector(".km-chart-container");
      if (chartContainer) {
        chartContainer.innerHTML = "";
        this.renderWeeklyChart(chartContainer, weeklyData);
      }
      const avgRate = this.calculateDailyAverageRate(weeklyData);
      const learningStreak = this.calculateLearningStreak(this.plugin.data);
      const metricCards = trendPanel.querySelectorAll(".km-metric-card");
      if (metricCards[0]) {
        const valueEl = metricCards[0].querySelector(".km-metric-value");
        if (valueEl)
          valueEl.textContent = `${avgRate.toFixed(1)} \u4E2A/\u5929`;
      }
      if (metricCards[1]) {
        const valueEl = metricCards[1].querySelector(".km-metric-value");
        if (valueEl)
          valueEl.textContent = `${learningStreak} \u5929`;
      }
    }
  }
  getModuleKnowledgePointCount(module2) {
    let count = module2.knowledgePoints.length;
    for (const subModule of module2.children) {
      count += subModule.knowledgePoints.length;
    }
    return count;
  }
  async renderModuleTerritory(container, module2) {
    const territory = container.createEl("div", {
      cls: "km-territory km-territory-clickable",
      attr: {
        "data-module-name": module2.name,
        "title": `\u70B9\u51FB\u67E5\u770B ${module2.name} \u8BE6\u7EC6\u4FE1\u606F`
      }
    });
    const totalPoints = this.getModuleKnowledgePointCount(module2);
    let gridCols, gridRows;
    if (totalPoints <= 16) {
      gridCols = Math.ceil(Math.sqrt(totalPoints));
    } else if (totalPoints <= 36) {
      gridCols = Math.min(8, Math.ceil(Math.sqrt(totalPoints)));
    } else {
      gridCols = Math.min(12, Math.ceil(Math.sqrt(totalPoints)));
    }
    gridRows = Math.ceil(totalPoints / gridCols);
    const territoryHeader = territory.createEl("div", { cls: "km-territory-header" });
    territoryHeader.createEl("span", {
      text: `${module2.name} (${totalPoints})`,
      cls: "km-territory-title"
    });
    territory.addEventListener("click", (e) => {
      if (!e.target.closest(".km-grid-cell")) {
        this.jumpToModuleView(module2.name);
      }
    });
    const pointsGrid = territory.createEl("div", { cls: "km-territory-grid" });
    pointsGrid.style.gridTemplateColumns = `repeat(${gridCols}, 1fr)`;
    pointsGrid.style.gridTemplateRows = `repeat(${gridRows}, 1fr)`;
    const allPoints = [];
    allPoints.push(...module2.knowledgePoints);
    for (const subModule of module2.children) {
      allPoints.push(...subModule.knowledgePoints);
    }
    for (let i = 0; i < totalPoints; i++) {
      const point = allPoints[i];
      if (point) {
        const gridCell = pointsGrid.createEl("div", {
          cls: `km-grid-cell status-${point.status}`,
          attr: {
            "data-point-id": point.id,
            "title": `${point.name} (${this.getStatusText(point.status)})`
          }
        });
        gridCell.addEventListener("click", async (e) => {
          e.stopPropagation();
          await this.handlePointClick(point.id, point.status);
        });
        gridCell.addEventListener("contextmenu", (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.showContextMenu(e, point.id, point.status);
        });
      } else {
        pointsGrid.createEl("div", { cls: "km-grid-cell km-empty-cell" });
      }
    }
  }
  async renderModuleView(container) {
    if (!this.selectedModule) {
      container.createEl("div", {
        cls: "km-empty-state",
        text: "\u8BF7\u9009\u62E9\u4E00\u4E2A\u6A21\u5757\u67E5\u770B\u8BE6\u7EC6\u4FE1\u606F"
      });
      return;
    }
    const data = await this.plugin.loadLearningData();
    if (!data) {
      container.createEl("p", { text: "\u65E0\u6CD5\u52A0\u8F7D\u5B66\u4E60\u6570\u636E", cls: "km-error" });
      return;
    }
    const module2 = data.knowledgeData.find((m) => m.name === this.selectedModule);
    if (!module2) {
      container.createEl("p", { text: "\u672A\u627E\u5230\u6307\u5B9A\u6A21\u5757", cls: "km-error" });
      return;
    }
    const moduleHeader = container.createEl("div", { cls: "km-module-detail-header" });
    moduleHeader.createEl("h3", { text: module2.name });
    const moduleStats = this.calculateModuleStats(module2);
    const statsRow = moduleHeader.createEl("div", { cls: "km-module-stats" });
    statsRow.createEl("span", {
      cls: "km-stat learned",
      text: `\u5DF2\u638C\u63E1 ${moduleStats.learned}`
    });
    statsRow.createEl("span", {
      cls: "km-stat review",
      text: `\u9700\u590D\u4E60 ${moduleStats.review}`
    });
    statsRow.createEl("span", {
      cls: "km-stat unlearned",
      text: `\u672A\u5B66\u4E60 ${moduleStats.unlearned}`
    });
    const detailContainer = container.createEl("div", { cls: "km-module-detail" });
    if (module2.knowledgePoints.length > 0) {
      const section = detailContainer.createEl("div", { cls: "km-points-section" });
      section.createEl("h4", { text: "\u57FA\u7840\u77E5\u8BC6\u70B9" });
      this.renderDetailedPoints(section, module2.knowledgePoints);
    }
    for (const subModule of module2.children) {
      if (subModule.knowledgePoints.length > 0) {
        const section = detailContainer.createEl("div", { cls: "km-points-section" });
        section.createEl("h4", { text: subModule.name });
        this.renderDetailedPoints(section, subModule.knowledgePoints);
      }
    }
  }
  renderMiniPoints(container, points) {
    for (const point of points) {
      const pointEl = container.createEl("div", {
        cls: `km-point-mini status-${point.status}`,
        attr: {
          "data-point-id": point.id,
          "title": `${point.name} (${this.getStatusText(point.status)})`
        }
      });
      pointEl.addEventListener("click", async (e) => {
        await this.handlePointClick(point.id, point.status);
      });
      pointEl.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        this.showContextMenu(e, point.id, point.status);
      });
    }
  }
  renderDetailedPoints(container, points) {
    const pointsGrid = container.createEl("div", { cls: "km-points-grid-detailed" });
    for (const point of points) {
      const pointEl = pointsGrid.createEl("div", {
        cls: `km-point-detailed status-${point.status}`,
        attr: {
          "data-point-id": point.id,
          "title": `\u70B9\u51FB\u5207\u6362\u72B6\u6001`
        }
      });
      pointEl.createEl("span", { text: point.name, cls: "km-point-name" });
      pointEl.createEl("span", { text: this.getStatusText(point.status), cls: "km-point-status" });
      pointEl.addEventListener("click", async (e) => {
        await this.handlePointClick(point.id, point.status);
      });
      pointEl.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        this.showContextMenu(e, point.id, point.status);
      });
    }
  }
  async handlePointClick(pointId, currentStatus) {
    const realCurrentStatus = this.getRealKnowledgePointStatus(pointId) || currentStatus;
    let newStatus;
    switch (realCurrentStatus) {
      case "unlearned":
        newStatus = "learned";
        break;
      case "learned":
        newStatus = "review";
        break;
      case "review":
        newStatus = "learned";
        break;
      default:
        newStatus = "learned";
    }
    console.log(`\u66F4\u65B0\u77E5\u8BC6\u70B9 ${pointId} \u72B6\u6001\u4ECE ${realCurrentStatus} \u5230 ${newStatus}`);
    const clickedElement = this.containerEl.querySelector(`[data-point-id="${pointId}"]`);
    if (clickedElement) {
      clickedElement.classList.remove("status-learned", "status-review", "status-unlearned");
      clickedElement.classList.add(`status-${newStatus}`);
      clickedElement.setAttribute("title", `${this.getPointNameById(pointId)} (${this.getStatusText(newStatus)})`);
      const statusSpan = clickedElement.querySelector(".km-point-status");
      if (statusSpan) {
        statusSpan.textContent = this.getStatusText(newStatus);
      }
      clickedElement.classList.add("status-changing");
      setTimeout(() => {
        clickedElement.classList.remove("status-changing");
      }, 300);
    }
    await this.plugin.updateKnowledgePointStatus(pointId, newStatus);
    this.updateStatsPanel();
  }
  getRealKnowledgePointStatus(pointId) {
    const data = this.plugin.data;
    if (!data)
      return null;
    for (const module2 of data.knowledgeData) {
      for (const point of module2.knowledgePoints) {
        if (point.id === pointId) {
          return point.status;
        }
      }
      for (const subModule of module2.children) {
        for (const point of subModule.knowledgePoints) {
          if (point.id === pointId) {
            return point.status;
          }
        }
      }
    }
    return null;
  }
  showContextMenu(event, pointId, currentStatus) {
    const realCurrentStatus = this.getRealKnowledgePointStatus(pointId) || currentStatus;
    const menu = document.createElement("div");
    menu.classList.add("km-context-menu");
    menu.style.position = "fixed";
    menu.style.left = `${event.clientX}px`;
    menu.style.top = `${event.clientY}px`;
    menu.style.zIndex = "10000";
    const pointName = this.getPointNameById(pointId);
    const title = menu.createEl("div", {
      cls: "km-context-menu-title",
      text: pointName
    });
    menu.createEl("div", { cls: "km-context-menu-separator" });
    const statusOptions = [
      { status: "learned", label: "\u2705 \u5DF2\u638C\u63E1", color: "#10b981" },
      { status: "review", label: "\u{1F504} \u9700\u590D\u4E60", color: "#f59e0b" },
      { status: "unlearned", label: "\u26AA \u672A\u5B66\u4E60", color: "#9ca3af" }
    ];
    statusOptions.forEach((option) => {
      const menuItem = menu.createEl("div", {
        cls: `km-context-menu-item ${realCurrentStatus === option.status ? "active" : ""}`,
        text: option.label
      });
      menuItem.style.color = option.color;
      menuItem.addEventListener("click", async () => {
        if (option.status !== realCurrentStatus) {
          await this.setKnowledgePointStatus(pointId, option.status);
        }
        document.body.removeChild(menu);
      });
    });
    document.body.appendChild(menu);
    const closeMenu = (e) => {
      if (!menu.contains(e.target)) {
        document.body.removeChild(menu);
        document.removeEventListener("click", closeMenu);
      }
    };
    setTimeout(() => {
      document.addEventListener("click", closeMenu);
    }, 100);
  }
  async setKnowledgePointStatus(pointId, newStatus) {
    console.log(`\u901A\u8FC7\u53F3\u952E\u83DC\u5355\u8BBE\u7F6E\u77E5\u8BC6\u70B9 ${pointId} \u72B6\u6001\u4E3A ${newStatus}`);
    const oldStatus = this.getRealKnowledgePointStatus(pointId) || "unlearned";
    this.plugin.recordLearningProgress(pointId, oldStatus, newStatus);
    const clickedElement = this.containerEl.querySelector(`[data-point-id="${pointId}"]`);
    if (clickedElement) {
      clickedElement.classList.remove("status-learned", "status-review", "status-unlearned");
      clickedElement.classList.add(`status-${newStatus}`);
      clickedElement.setAttribute("title", `${this.getPointNameById(pointId)} (${this.getStatusText(newStatus)})`);
      const statusSpan = clickedElement.querySelector(".km-point-status");
      if (statusSpan) {
        statusSpan.textContent = this.getStatusText(newStatus);
      }
      clickedElement.classList.add("status-changing");
      setTimeout(() => {
        clickedElement.classList.remove("status-changing");
      }, 300);
    }
    await this.plugin.updateKnowledgePointStatus(pointId, newStatus, false);
    this.updateStatsPanel();
  }
  getPointNameById(pointId) {
    const data = this.plugin.data;
    if (!data)
      return "";
    for (const module2 of data.knowledgeData) {
      for (const point of module2.knowledgePoints) {
        if (point.id === pointId) {
          return point.name;
        }
      }
      for (const subModule of module2.children) {
        for (const point of subModule.knowledgePoints) {
          if (point.id === pointId) {
            return point.name;
          }
        }
      }
    }
    return "";
  }
  calculateModuleProgress(module2) {
    let totalPoints = module2.knowledgePoints.length;
    let learnedPoints = module2.knowledgePoints.filter((p) => p.status === "learned").length;
    for (const subModule of module2.children) {
      totalPoints += subModule.knowledgePoints.length;
      learnedPoints += subModule.knowledgePoints.filter((p) => p.status === "learned").length;
    }
    return totalPoints > 0 ? Math.round(learnedPoints / totalPoints * 100) : 0;
  }
  calculateGlobalStats(data) {
    let learned = 0, review = 0, unlearned = 0;
    for (const module2 of data.knowledgeData) {
      for (const point of module2.knowledgePoints) {
        switch (point.status) {
          case "learned":
            learned++;
            break;
          case "review":
            review++;
            break;
          case "unlearned":
            unlearned++;
            break;
        }
      }
      for (const subModule of module2.children) {
        for (const point of subModule.knowledgePoints) {
          switch (point.status) {
            case "learned":
              learned++;
              break;
            case "review":
              review++;
              break;
            case "unlearned":
              unlearned++;
              break;
          }
        }
      }
    }
    return {
      learned,
      review,
      unlearned,
      total: learned + review + unlearned
    };
  }
  calculateModuleStats(module2) {
    let learned = 0, review = 0, unlearned = 0;
    for (const point of module2.knowledgePoints) {
      switch (point.status) {
        case "learned":
          learned++;
          break;
        case "review":
          review++;
          break;
        case "unlearned":
          unlearned++;
          break;
      }
    }
    for (const subModule of module2.children) {
      for (const point of subModule.knowledgePoints) {
        switch (point.status) {
          case "learned":
            learned++;
            break;
          case "review":
            review++;
            break;
          case "unlearned":
            unlearned++;
            break;
        }
      }
    }
    return { learned, review, unlearned };
  }
  getStatusText(status) {
    switch (status) {
      case "learned":
        return "\u5DF2\u638C\u63E1";
      case "review":
        return "\u9700\u590D\u4E60";
      case "unlearned":
        return "\u672A\u5B66\u4E60";
      default:
        return "\u672A\u77E5";
    }
  }
};
var KnowledgeMapSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u77E5\u8BC6\u70B9\u5730\u56FE\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u5730\u56FE\u6807\u9898").setDesc("\u8BBE\u7F6E\u77E5\u8BC6\u70B9\u5730\u56FE\u5728\u9876\u90E8\u663E\u793A\u7684\u6807\u9898\u6587\u5B57").addText((text) => text.setPlaceholder("\u5B66\u4E60\u8FDB\u5EA6\u5730\u56FE").setValue(this.plugin.settings.mapTitle).onChange(async (value) => {
      this.plugin.settings.mapTitle = value || "\u5B66\u4E60\u8FDB\u5EA6\u5730\u56FE";
      await this.plugin.saveSettings();
      this.refreshMapTitle();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6570\u636E\u6587\u4EF6\u8DEF\u5F84").setDesc("\u5B66\u4E60\u6570\u636E\u6587\u4EF6\u7684\u8DEF\u5F84\uFF08\u76F8\u5BF9\u4E8Evault\u6839\u76EE\u5F55\uFF09\u3002\u652F\u6301.md\u6587\u4EF6\uFF08\u63A8\u8350\uFF09\u6216.json\u6587\u4EF6").addText((text) => text.setPlaceholder("learning-data.md").setValue(this.plugin.settings.dataFilePath).onChange(async (value) => {
      this.plugin.settings.dataFilePath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u4FDD\u5B58").setDesc("\u4FEE\u6539\u77E5\u8BC6\u70B9\u72B6\u6001\u65F6\u81EA\u52A8\u4FDD\u5B58\u5230\u6587\u4EF6").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoSave).onChange(async (value) => {
      this.plugin.settings.autoSave = value;
      await this.plugin.saveSettings();
    }));
  }
  // 刷新地图标题显示
  refreshMapTitle() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_KNOWLEDGE_MAP);
    if (leaves.length > 0) {
      const view = leaves[0].view;
      if (view && view.containerEl) {
        const titleEl = view.containerEl.querySelector(".km-title-area h3");
        if (titleEl) {
          titleEl.textContent = `\u{1F4CA} ${this.plugin.settings.mapTitle}`;
        }
      }
    }
  }
};
